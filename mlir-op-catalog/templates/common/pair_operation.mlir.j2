module {
  func.func @main(
    %input: tensor<{{shape[0]}}x{{shape[1]}}x{{shape[2]}}x{{shape[3]}}x{{dtype}}>
  ) -> tensor<{{shape[0]}}x{{shape[1]}}x{{shape[2]}}x{{shape[3]}}x{{dtype}}> {

    // 第一个操作: {{op1_id}}
    %result1 = linalg.generic {
      indexing_maps = [
        affine_map<(i, j, k, l) -> (i, j, k, l)>,
        affine_map<(i, j, k, l) -> (i, j, k, l)>
      ],
      iterator_types = ["parallel", "parallel", "parallel", "parallel"]
    } ins(%input : tensor<{{shape[0]}}x{{shape[1]}}x{{shape[2]}}x{{shape[3]}}x{{dtype}}>) 
        outs(%input : tensor<{{shape[0]}}x{{shape[1]}}x{{shape[2]}}x{{shape[3]}}x{{dtype}}>) {
      ^bb0(%x: {{dtype}}, %o: {{dtype}}):
        {% if op1_id == 'relu' %}
        %cst0 = arith.constant 0.0 : {{dtype}}
        %result = arith.maximumf %x, %cst0 : {{dtype}}
        {% elif op1_id == 'exp' %}
        %result = math.exp %x : {{dtype}}
        {% elif op1_id == 'log' %}
        %result = math.log %x : {{dtype}}
        {% elif op1_id == 'tanh' %}
        %result = math.tanh %x : {{dtype}}
        {% elif op1_id == 'sigmoid' %}
        %cst_neg1 = arith.constant -1.0 : {{dtype}}
        %cst1 = arith.constant 1.0 : {{dtype}}
        %neg_x = arith.mulf %x, %cst_neg1 : {{dtype}}
        %exp_neg_x = math.exp %neg_x : {{dtype}}
        %denom = arith.addf %cst1, %exp_neg_x : {{dtype}}
        %result = arith.divf %cst1, %denom : {{dtype}}
        {% else %}
        %result = arith.addf %x, %x : {{dtype}}
        {% endif %}
        linalg.yield %result : {{dtype}}
    } -> tensor<{{shape[0]}}x{{shape[1]}}x{{shape[2]}}x{{shape[3]}}x{{dtype}}>

    // 第二个操作: {{op2_id}}
    %result2 = linalg.generic {
      indexing_maps = [
        affine_map<(i, j, k, l) -> (i, j, k, l)>,
        affine_map<(i, j, k, l) -> (i, j, k, l)>
      ],
      iterator_types = ["parallel", "parallel", "parallel", "parallel"]
    } ins(%result1 : tensor<{{shape[0]}}x{{shape[1]}}x{{shape[2]}}x{{shape[3]}}x{{dtype}}>) 
        outs(%result1 : tensor<{{shape[0]}}x{{shape[1]}}x{{shape[2]}}x{{shape[3]}}x{{dtype}}>) {
      ^bb0(%x: {{dtype}}, %o: {{dtype}}):
        {% if op2_id == 'relu' %}
        %cst0 = arith.constant 0.0 : {{dtype}}
        %result = arith.maximumf %x, %cst0 : {{dtype}}
        {% elif op2_id == 'exp' %}
        %result = math.exp %x : {{dtype}}
        {% elif op2_id == 'log' %}
        %result = math.log %x : {{dtype}}
        {% elif op2_id == 'tanh' %}
        %result = math.tanh %x : {{dtype}}
        {% elif op2_id == 'sigmoid' %}
        %cst_neg1 = arith.constant -1.0 : {{dtype}}
        %cst1 = arith.constant 1.0 : {{dtype}}
        %neg_x = arith.mulf %x, %cst_neg1 : {{dtype}}
        %exp_neg_x = math.exp %neg_x : {{dtype}}
        %denom = arith.addf %cst1, %exp_neg_x : {{dtype}}
        %result = arith.divf %cst1, %denom : {{dtype}}
        {% else %}
        %result = arith.addf %x, %x : {{dtype}}
        {% endif %}
        linalg.yield %result : {{dtype}}
    } -> tensor<{{shape[0]}}x{{shape[1]}}x{{shape[2]}}x{{shape[3]}}x{{dtype}}>

    return %result2 : tensor<{{shape[0]}}x{{shape[1]}}x{{shape[2]}}x{{shape[3]}}x{{dtype}}>
  }
}
